// Code generated by MockGen. DO NOT EDIT.
// Source: ocsp_tools.go

// Package mocks is a generated GoMock package.
package mocks

import (
	crypto "crypto"
	x509 "crypto/x509"
	gomock "github.com/golang/mock/gomock"
	ocsp "golang.org/x/crypto/ocsp"
	reflect "reflect"
)

// MockToolsInterface is a mock of ToolsInterface interface
type MockToolsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockToolsInterfaceMockRecorder
}

// MockToolsInterfaceMockRecorder is the mock recorder for MockToolsInterface
type MockToolsInterfaceMockRecorder struct {
	mock *MockToolsInterface
}

// NewMockToolsInterface creates a new mock instance
func NewMockToolsInterface(ctrl *gomock.Controller) *MockToolsInterface {
	mock := &MockToolsInterface{ctrl: ctrl}
	mock.recorder = &MockToolsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockToolsInterface) EXPECT() *MockToolsInterfaceMockRecorder {
	return m.recorder
}

// ReadOCSPResp mocks base method
func (m *MockToolsInterface) ReadOCSPResp(arg0 string) (*ocsp.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOCSPResp", arg0)
	ret0, _ := ret[0].(*ocsp.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOCSPResp indicates an expected call of ReadOCSPResp
func (mr *MockToolsInterfaceMockRecorder) ReadOCSPResp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOCSPResp", reflect.TypeOf((*MockToolsInterface)(nil).ReadOCSPResp), arg0)
}

// ParseCertificateFile mocks base method
func (m *MockToolsInterface) ParseCertificateFile(arg0 string) (*x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseCertificateFile", arg0)
	ret0, _ := ret[0].(*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseCertificateFile indicates an expected call of ParseCertificateFile
func (mr *MockToolsInterfaceMockRecorder) ParseCertificateFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseCertificateFile", reflect.TypeOf((*MockToolsInterface)(nil).ParseCertificateFile), arg0)
}

// GetIssuerCertFromLeafCert mocks base method
func (m *MockToolsInterface) GetIssuerCertFromLeafCert(arg0 *x509.Certificate) (*x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuerCertFromLeafCert", arg0)
	ret0, _ := ret[0].(*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuerCertFromLeafCert indicates an expected call of GetIssuerCertFromLeafCert
func (mr *MockToolsInterfaceMockRecorder) GetIssuerCertFromLeafCert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuerCertFromLeafCert", reflect.TypeOf((*MockToolsInterface)(nil).GetIssuerCertFromLeafCert), arg0)
}

// FetchOCSPResp mocks base method
func (m *MockToolsInterface) FetchOCSPResp(arg0, arg1 string, arg2, arg3 *x509.Certificate, arg4 string, arg5 crypto.Hash) (*ocsp.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOCSPResp", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*ocsp.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOCSPResp indicates an expected call of FetchOCSPResp
func (mr *MockToolsInterfaceMockRecorder) FetchOCSPResp(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOCSPResp", reflect.TypeOf((*MockToolsInterface)(nil).FetchOCSPResp), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetCertChainAndStapledResp mocks base method
func (m *MockToolsInterface) GetCertChainAndStapledResp(arg0 string) ([]*x509.Certificate, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertChainAndStapledResp", arg0)
	ret0, _ := ret[0].([]*x509.Certificate)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCertChainAndStapledResp indicates an expected call of GetCertChainAndStapledResp
func (mr *MockToolsInterfaceMockRecorder) GetCertChainAndStapledResp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertChainAndStapledResp", reflect.TypeOf((*MockToolsInterface)(nil).GetCertChainAndStapledResp), arg0)
}
